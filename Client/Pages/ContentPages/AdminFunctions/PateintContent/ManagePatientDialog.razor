<EditForm Model="Patient" OnValidSubmit="AssingPatient">
    <DataAnnotationsValidator />
    <MudDialog>
        <TitleContent>
            <h2>Manage Patient</h2>
        </TitleContent>
        <DialogContent>
            @if (warning)
            {
                <MudAlert Severity="Severity.Error">@message</MudAlert>
            }
            <MudTextField T="String" Label="Patient name" ReadOnly Value="Patient.Patient_Name" Class="mb-3"/>
             <MudTextField T="String" Label="Dietitan name" ReadOnly Value="Patient.Dietitian_Name" Class="mb-3" />
             @if (Patient.AssignDate != null)
            {
                <MudTextField T="DateTime" Label="Assigned Date" ReadOnly Value="(DateTime)Patient.AssignDate" />
            }
        </DialogContent>
        <DialogActions>
            <MudFab Label="Unassign Patient" Color="Color.Error" Size="Size.Small" OnClick="() => UnAssign((int)Patient.Patient_Id!)" />
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit">Save</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>
@code {


    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    PatientDTO Patient = new();

    private List<AvailableDietDTO> dietitians = new();

    private bool warning = false;

    private string message = "";

    [Parameter]
    public int GetPatientId { get; set; } // Get patient id from PatientsPage

    private void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        Patient = await patientService.GetPatientByIdAsync(GetPatientId, Constants.AdminPatientUrl);
        dietitians = await availableDietService.GetAvailableDiet(Constants.DietitianUrl);
    }

    async Task AssingPatient()
    {
        var result = await patientService.AssignAsync(Patient, Constants.AdminPatientUrl);


        if (Patient.Dietitian_Id == null)
        {
            warning = true;
            message = "Please select a dietitian before saving.";
            StateHasChanged();
            return;
        }
        else if (result.flag == false)
        {
            warning = true;
            message = result.Message; // Warning message
            StateHasChanged();
            return;
        }
        else
        {
            MudDialog.Close(DialogResult.Ok(Patient)); // Successfully save
        }

    }

    async Task UnAssign(int patientId)
    {
        Console.WriteLine($"Pati ID: {patientId}");
        var result = await patientService.UnassignAsync(Patient, Constants.AdminPatientUrl);

        if (result.flag)
        {
            MudDialog.Close(DialogResult.Ok(Patient));
        }
        else
        {
            Snackbar.Add(result.Message);
            return;
        }
    }

}
