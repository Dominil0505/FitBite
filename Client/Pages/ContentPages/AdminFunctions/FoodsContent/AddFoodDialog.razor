<EditForm Model="Food" OnValidSubmit="AddFood">
    <MudDialog>
        <TitleContent>
            <h2>Add Food</h2>
        </TitleContent>
        <DialogContent>
            @if (isUsed)
            {
                <MudAlert Severity="Severity.Error">@message</MudAlert>
            }
            <MudTextField T="string" Label="Food name" Required="true" RequiredError="Food name is required!" @bind-Value="Food.Food_Name" Class="mb-5"/>
           <MudPaper Class="pa-4 align-start d-flex" Outlined="true">
                <MudSpacer />
                <MudTextField T="double" Label="Protein" Required="true" RequiredError="Proteinis required!" @bind-Value="@totalProtein" Class="mb-5" ReadOnly="true" />
                <MudSpacer/>
                <MudTextField T="double" Label="Fat" Required="true" RequiredError="Fat is required!" @bind-Value="totalFat" Class="mb-5" ReadOnly="true" />
                <MudSpacer />
                <MudTextField T="double" Label="Carbohydrate" Required="true" RequiredError="Carbohydrate is required!" @bind-Value="totalCarbohydrate" Class="mb-5" ReadOnly="true" />
                <MudSpacer />
                <MudTextField T="double" Label="Calorie" Required="true" RequiredError="Caloriee is required!" @bind-Value="totalCalories" Class="mb-5" ReadOnly="true" />
           </MudPaper>
                    
            <MudSelect T="string" Label="Select Allergies" 
                MultiSelection="true" 
                @bind-SelectedValues="selectedAllergies" 
                Class="mb-5" AnchorOrigin="Origin.BottomCenter">
                @foreach (var allergy in allergies)
                {
                    <MudSelectItem T="string" Value="@allergy.Allergy_Name">@allergy.Allergy_Name</MudSelectItem>
                }
            </MudSelect> 

            <MudSelect T="string" Label="Select Ingredients" MultiSelection="true"
                       SelectedValuesChanged="@(values => { selectedIngredients = values; CalcCalorie(); })"
                       AnchorOrigin="Origin.BottomCenter"
            Class="mb-5">
                @foreach (var ingredient in ingredients)
                {
                    <MudSelectItem T="string" Value="@ingredient.Ingredient_Name">
                        @ingredient.Ingredient_Name
                    </MudSelectItem>
                }
            </MudSelect>
            

        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit">Save</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm> 

@code {
    private string stringValue { get; set; }    

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    private bool isUsed = false;
    private string message = "";

    private void Cancel() => MudDialog.Cancel();

    FoodsDTO Food = new();

    private List<AllergyDTO> allergies = new List<AllergyDTO>();
    private List<IngredientDTO> ingredients = new List<IngredientDTO>();

    private IEnumerable<string> selectedAllergies { get; set; } = new HashSet<string>();
    private IEnumerable<string> selectedIngredients { get; set; } = new HashSet<string>();

    private double totalCalories = 0;
    private double totalProtein = 0;
    private double totalFat = 0;
    private double totalCarbohydrate = 0;

    protected async override Task OnInitializedAsync()
    {
        allergies = await allergyService.GetAll(Constants.allergyBaseUrl);
        ingredients = await ingredientService.GetAll(Constants.ingredientBaseUrl);

        StateHasChanged();
    }

    async Task AddFood()
    {
        Food.selectedAllergy = selectedAllergies.ToList();
        Food.selectedIngredients = selectedIngredients.ToList();
        Food.Calorie = totalCalories;
        Food.Protein = totalProtein;
        Food.Fat = totalFat;
        Food.Carbohydrate = totalCarbohydrate;

        var result = await foodService.Insert(Food, Constants.foodBaseUrl);

        if (!result.flag)
        {
            isUsed = true;
            message = result.Message;
        }
        if (result.flag)
        {
            MudDialog.Close(DialogResult.Ok(Food));
        }
        else
        {
            isUsed = true;
            message = result.Message;
            StateHasChanged();
        }
    }

    private void CalcCalorie()
    {
        totalCalories = 0;
        totalProtein = 0;
        totalFat = 0;
        totalCarbohydrate = 0;

        foreach (var ingredientName in selectedIngredients)
        {

            Console.WriteLine(ingredientName);
            var findIng = ingredients.FirstOrDefault(_ => _.Ingredient_Name == ingredientName);

            if (findIng != null)
            {
                totalCalories += findIng.Calorie;
                totalProtein += findIng.Protein;
                totalFat += findIng.Fat;
                totalCarbohydrate += findIng.Carbohydrate;
            }
        }

    }
}
