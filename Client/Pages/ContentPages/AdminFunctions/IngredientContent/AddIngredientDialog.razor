<EditForm Model="Ingredient" OnValidSubmit="AddIngredient">
    <DataAnnotationsValidator />
    <MudDialog>
        <TitleContent>
            <h2>Add ingredient</h2>
        </TitleContent>
        <DialogContent>
            @if (isUsed)
            {
                <MudAlert Severity="Severity.Error">@message</MudAlert>
            }
            <MudTextField T="string" Label="Ingredient name" For="@(() => Ingredient.Ingredient_Name)" @bind-Value="Ingredient.Ingredient_Name" Class="mb-5" />
            <MudTextField T="double" Label="Calorie" For="@(() => Ingredient.Calorie)" @bind-Value="Ingredient.Calorie" Class="mb-5" />
            <MudTextField T="double" Label="Protein" For="@(() => Ingredient.Protein)" @bind-Value="Ingredient.Protein" Class="mb-5" />
            <MudTextField T="double" Label="Fat" For="@(() => Ingredient.Fat)" @bind-Value="Ingredient.Fat" Class="mb-5" />
            <MudTextField T="double" Label="Carbohydrate" For="@(() => Ingredient.Carbohydrate)" @bind-Value="Ingredient.Carbohydrate" Class="mb-5" />

        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit">Save</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>
@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    private bool isUsed = false;
    private string message = "";

    private void Cancel() => MudDialog.Cancel();

    IngredientDTO Ingredient = new();

    async Task AddIngredient()
    {
        var result = await ingredientService.Insert(Ingredient, Constants.ingredientBaseUrl);

        if (result.flag)
        {
            MudDialog.Close(DialogResult.Ok(Ingredient));
        }
        else
        {
            isUsed = true;
            message = result.Message;
            StateHasChanged();
        }
    }
}

