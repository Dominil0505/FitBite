@using Client.Pages.OtherPages


<MudPaper Width="550px" Elevation="0" Style="border-radius: 15px;" Class="pa-4 ma-2">
    <h2>Delete account</h2>
    <MudFab Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" Label="Delete account" Size="Size.Medium" Class="mt-5" OnClick="DeleteProfileAsnyc" />
</MudPaper>


@code {

    int user_id = 0;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        user_id = Convert.ToInt32(user.Claims.FirstOrDefault(_ => _.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value);
    }

    private async Task DeleteProfileAsnyc()
    {
        var parameters = new DialogParameters<DeleteDialog>
        {
            {x => x.ContentText, "Do you really want to delete your profile? This process cannot be undone."},
            {x => x.ButtonText, "Delete"},
            {x => x.Color, Color.Error},
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = DialogService.Show<DeleteDialog>("Delete profile", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await patientProfileService.deleteProfile(user_id, "patient");
            var logoutModel = new UserSession();
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(logoutModel);
            NavManager.NavigateTo("/", forceLoad: true);

        }
    }
}
