@page "/authentication/register"

@code {

}

@using System.ComponentModel.DataAnnotations

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid Class="d-flex mt-20 justify-center">
        <MudItem xs="12" sm="5">
            <MudCard>
                <MudCardHeader Class="d-flex justify-center">
                    <h1>Registration</h1>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField Label="FullName"
                                  @bind-Value="model.Username" For="@(() => model.Username)" />
                    <MudTextField Label="Email" Class="mt-3"
                                  @bind-Value="model.Email" For="@(() => model.Email)" />
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                  @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                    <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                                  @bind-Value="model.Password2" For="@(() => model.Password2)" InputType="InputType.Password" Style="@($"border")"/>
                </MudCardContent>
                <MudCardActions Class="d-flex justify-center">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Class="" Color="Color.Primary">Register</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    RegisterAccountForm model = new RegisterAccountForm();
    [Inject] private GetHttpClient HttpClientService {get; set;}

    bool success;

    public class RegisterAccountForm
    {
        [Required]
        public string Username { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string Password2 { get; set; }

    }

    private async Task OnValidSubmit()
    {
        try
        {
            var client = HttpClientService.GetPublicHttpClient();
            var response = await client.PostAsJsonAsync("api/Authentication/register", model);

            if (response.IsSuccessStatusCode)
            {
                success = true;
            }
            else
            {
                success = false;
            }
        }
        catch (Exception ex)
        {
            success = false;
        }

        StateHasChanged();
    }

}

