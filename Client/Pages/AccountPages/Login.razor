@page "/authentication/login"

@using BaseLibrary.DTOs
@inject HttpClient httpClient

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm Model="User" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" OnValidSubmit="HandleLogin">
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                              @bind-Value="User.Email"
                              Validation="@(new {ErrorMessage = "The email address is invalid"})" />
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                              InputType="InputType.Password"
                              @bind-Value="User.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Password is required!" />
                <div class="d-flex align-center justify-space-between">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="@(async () => await HandleLogin() )" Class="ml-auto">Login</MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    CustomLogin User = new();

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
    }

    private async Task HandleLogin()
    {
        var result = await accountService.SignInAsync(User);

        if (result.Flag)
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession()
                {
                    Token = result.Token, RefreshToken = result.RefreshToken
        });

            NavManager.NavigateTo("/", forceLoad: true);
        }

        StateHasChanged();
    }
}
