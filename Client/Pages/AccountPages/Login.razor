@page "/authentication/login"
@layout AuthenticationLayout
@using Client.Pages.OtherPages

<EditForm Model="User" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <MudGrid Class="d-flex mt-20 justify-center">
        <MudItem xs="12" sm="4">
            <MudCard class="pa-4">
                <MudCardHeader Class="d-flex justify-center">
                    <h1>Welcome back</h1>
                </MudCardHeader>
                <MudCardHeader Class="d-flex justify-center">
                    <h2>Sign in</h2>
                </MudCardHeader>
                <MudCardHeader Class="d-flex justify-center">
                    <img width="96" height="96" src="https://img.icons8.com/color/96/doctor-female-skin-type-2.png" alt="doctor" />
                    <img width="96" height="96" src="https://img.icons8.com/color/96/user.png" alt="user" />
                </MudCardHeader>
                <MudCardContent>

                    <MudTextField Label="Email" Class="mt-3" @bind-Value="User.Email" For="@(() => User.Email)" />
                    <MudTextField Label="Password" Class="mt-3" @bind-Value="User.Password" For="@(() => User.Password)" InputType="InputType.Password" />
                <h3>If you don't have an account <MudLink Href="/authentication/register">Register</MudLink></h3>
                
                </MudCardContent>
                <MudCardActions Class="d-flex justify-center">
                    @if (ShowLoadingButton)
                    {
                        <ButtonLoadingSpinner></ButtonLoadingSpinner>
                    }
                    else
                    {
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Class="" Color="Color.Primary">Login</MudButton>
                    }
                    
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm> 

@code {
    CustomLogin User = new();

    public bool ShowLoadingButton { get; set; }

    async Task HandleLogin()
    {
        ShowLoadingButton = true;
        var result = await accountService.SignInAsync(User);

        if(result.Flag){
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession()
                { Token = result.Token, RefreshToken = result.RefreshToken });
            NavManager.NavigateTo("/", forceLoad: true);
        }

        ShowLoadingButton = false;
    }
}
